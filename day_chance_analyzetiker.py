# -*- coding: utf-8 -*-
"""Day_Month_AnalyzeTiker.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1OKyGC11f68bVgFTwqsmMMeOf7vErnyqD
"""
from pathlib import Path
import pandas as pd
# !pip install yfinance
import yfinance as yf
# import numpy as np
import matplotlib.pyplot as plt
import re
import datetime
# from statistics import mean



def open_file_and_split(filename):
    with open(filename, 'r', encoding='UTF-8') as file:
        content = file.read()
        content = content.replace("'", "").split(sep=', ')
        return content


# Выбор кол-ва п\н дней по указаному дню  
def day_chance(day: int, month: int, tikers: list):
    day_chance_dict = dict()
    for tiker in tikers:
        list_pday, list_nday = [], []
        for year in range(2010, 2022):
            pday = (daily_pct_change.loc[
                (daily_pct_change.index.date == datetime.date(year, month, day)) & (daily_pct_change[tiker] > 0)])[
                tiker]
            nday = (daily_pct_change.loc[
                (daily_pct_change.index.date == datetime.date(year, month, day)) & (daily_pct_change[tiker] < 0)])[
                tiker]
            if nday.empty == False:
                list_nday.append(nday)
                # print(list_nday)
            if pday.empty == False:
                list_pday.append(pday)
            # chance_day = count_pday / (count_pday + count_nday)
        day_chance_dict[tiker] = [len(list_pday), len(list_nday)]
    return day_chance_dict


def chance_count_day():
    data_for_df = dict()
    for tiker in tikers:
        # выбор данных по дням недели
        chance_dayList, pdayList, ndayList = [], [], []
        for i in range(5):
            count_pday = len(daily_pct_change.loc[
                                 (daily_pct_change[tiker].index.dayofweek == i) & (daily_pct_change[tiker] > 0) & (
                                             daily_pct_change[tiker].index.year == 2021)])
            count_nday = len(daily_pct_change.loc[
                                 (daily_pct_change[tiker].index.dayofweek == i) & (daily_pct_change[tiker] < 0) & (
                                             daily_pct_change[tiker].index.year == 2021)])
            chance_day = count_pday / (count_pday + count_nday)
            chance_dayList.append(chance_day)
            pdayList.append(count_pday)
            ndayList.append(count_nday)

        data_for_df[f'{tiker} chance'] = chance_dayList
        data_for_df[f'{tiker} count_pday'] = pdayList
        data_for_df[f'{tiker} count_nday'] = ndayList
    return data_for_df

# выбор данных по месяцам
# for month in range(1, 13):
#   count_pmonth = 0
#   count_nmonth = 0
#   for year in range(2010, 2022):
#     sum_month = sum(daily_pct_change.loc[(daily_pct_change.index.year == year) & (daily_pct_change.index.month == month) , tiker])
#     if sum_month > 0:
#       count_pmonth += 1
#     if sum_month < 0:
#       count_nmonth += 1
#     # print(sum_month)
#   chance_month = count_pmonth / (count_pmonth + count_nmonth)
#   print(chance_month, count_pmonth, count_nmonth)
# print('-----------')



# Выбор данных по месяцам
def chance_count_month(tikers, start_date):
    input_data = yf.download(tikers, start_date, interval='1mo')
    pct_change_month = input_data['Adj Close'].pct_change()
    # print(pct_change_month.tail(10))
    data_for_df = dict()
    # out = []
    for tiker in tikers:
        # tiker = 'BABA'

        pmonthList, nmontList, chance_monthList, average_pmonthList, average_nmonthList, max_pmonthList, min_nmonthList = [], [], [], [], [], [], []
        for month in range(1, 13):
            count_pmonth = len(
                pct_change_month.loc[(pct_change_month.index.month == month) & (pct_change_month[tiker] > 0)])
            count_nmonth = len(
                pct_change_month.loc[(pct_change_month.index.month == month) & (pct_change_month[tiker] < 0)])
            # Средний процент изм в мес за весь период
            average_pmonth = \
            (pct_change_month.loc[(pct_change_month.index.month == month) & (pct_change_month[tiker] > 0)])[
                tiker].mean()
            average_nmonth = \
            (pct_change_month.loc[(pct_change_month.index.month == month) & (pct_change_month[tiker] < 0)])[
                tiker].mean()
            max_pmonth = \
            (pct_change_month.loc[(pct_change_month.index.month == month) & (pct_change_month[tiker] > 0)])[tiker].max()
            min_nmonth = \
            (pct_change_month.loc[(pct_change_month.index.month == month) & (pct_change_month[tiker] < 0)])[tiker].min()
            chance_month = count_pmonth / (count_pmonth + count_nmonth)
            pmonthList.append(count_pmonth)
            nmontList.append(count_nmonth)
            average_pmonthList.append(average_pmonth)
            average_nmonthList.append(average_nmonth)
            max_pmonthList.append(max_pmonth)
            min_nmonthList.append(min_nmonth)
            chance_monthList.append(chance_month)

            # print(chance_month, count_pmonth, count_nmonth)

        data_for_df[f'{tiker} chance'] = chance_monthList
        data_for_df[f'{tiker} count_pmonth'] = pmonthList
        data_for_df[f'{tiker} count_nmonth'] = nmontList
        data_for_df[f'{tiker} average_pmonth'] = average_pmonthList
        data_for_df[f'{tiker} average_nmonth'] = average_nmonthList
        data_for_df[f'{tiker} max_pmonth'] = max_pmonthList
        data_for_df[f'{tiker} min_nmonth'] = min_nmonthList
    return data_for_df
    # df_chance_month = df_chance_month.transpose()




def recommendationLast(tiker):
    return yf.Ticker(tiker).recommendations.tail(1)

#
# for tiker in tikers:
#     try:
#         pass
#         # print(tiker, '\n', recommendationLast(tiker))
#     except Exception:
#         # pass
#         print(tiker, '\n')

# Скорректированая цена закрытия`
# daily_close = sber[['Adj Close']]

# Дневная доходность
# daily_pct_change = daily_close.pct_change()

# Заменить NA значения на 0
# daily_pct_change.fillna(0, inplace=True)

# print(daily_pct_change.head())

# Дневная лог доходность
# daily_log_returns = np.log(daily_close.pct_change()+1)

# print(daily_log_returns.head())

# Взять у `sber` значения за последний рабочий день месяца
# monthly = sber.resample('BM').apply(lambda x: x[-1])

# Месячная доходность
# print(monthly.pct_change().tail())

# Пересчитать `sber` по кварталам и взять среднее значение за квартал
# quarter = sber.resample("4M").mean()

# Квартальную доходность
# print(quarter.pct_change().tail())

# Дневная доходность
# daily_pct_change = daily_close / daily_close.shift(1) - 1
def other(daily_pct_change = 0):

    print(daily_pct_change.head())

    # Диаграмма `daily_pct_c`
    daily_pct_change.hist(bins=50)

    plt.show()

    # Общая статистика
    print(daily_pct_change.describe())

    # Кумулютивная дневная доходность
    cum_daily_return = (1 + daily_pct_change).cumprod()

    print(cum_daily_return.tail())

    # Построение кумулятивной дневной доходности
    cum_daily_return.plot(figsize=(12, 8))

    plt.show()

    # Месячная кумулятивная доходность
    cum_monthly_return = cum_daily_return.resample("M").mean()

    print(cum_monthly_return.tail())

    ticker = ['AFLT.ME', 'DSKY.ME', 'IRAO.ME', 'PIKK.ME', 'PLZL.ME', 'SBER.ME', 'ENRU.ME']

    stock = yf.download(ticker, '2018-01-01')

    # Дневная доходность в `daily_close_px`
    daily_pct_change = stock['Adj Close'].pct_change()

    # Распределение
    daily_pct_change.hist(bins=50, sharex=True, figsize=(20, 8))

    plt.show()

    print(stock.columns)

    from pandas.plotting import scatter_matrix

    # Матрица рассеивания `daily_pct_change`
    scatter_matrix(daily_pct_change, diagonal='kde', alpha=0.1, figsize=(20, 20))

    plt.show()

def get_pct_chance_months_tiker(tiker):

    # Вывод всех данных
    df_chance_count_month = pd.DataFrame(chance_count_month(tikers, start_date), index=range(1, 13))
    a = [x for x in df_chance_count_month.columns if re.search(tiker, x)]
    pd.set_option('display.max_columns', 7)
    return df_chance_count_month[a]

if __name__ == '__main__':
    start_date = '2001-01-01'
    path = Path('Search.txt')
    tikers = open_file_and_split(path)

    tiker = 'MOMO'
    print(get_pct_chance_months_tiker(tiker))
    print(recommendationLast(tiker))
    # data = yf.download(tikers, start=start_date)

    # % изменения
    # daily_pct_change = data['Adj Close'].pct_change()

    # day_chance(29, 11, ['MOMO'])
    # pd.DataFrame(day_chance(16, 11, ['BABA', 'INTC']))



    # print(data_for_df)
    # df_chance_count_day = pd.DataFrame(chance_count_day, index=range(5))
    # print(df_chance_count_day)

    # Вывод только % по дням для каждого тикера
    # a = [x for x in df_chance_count_day.columns if re.search(' chance', x)]
    # df_chance_count_day[a]

    # Вывод всех показателей по заданному тикеру

    # Вывод толко % по месяцам для каждого тикера
    # a = [x for x in df_chance_count_month.columns if re.search(' chance', x)]
    # df_chance_count_month[a]

